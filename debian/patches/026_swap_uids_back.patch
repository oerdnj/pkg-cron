--- a/cron.h
+++ b/cron.h
@@ -225,6 +225,7 @@ int		job_runqueue __P((void)),
 		get_char __P((FILE *)),
 		get_string __P((char *, int, FILE *, char *)),
 		swap_uids __P((void)),
+		swap_uids_back __P((void)),
 		load_env __P((char *, FILE *)),
 		cron_pclose __P((FILE *)),
 		strcmp_until __P((char *, char *, int)),
--- a/misc.c
+++ b/misc.c
@@ -654,11 +654,22 @@ arpadate(clock)
 #endif /*MAIL_DATE*/
 
 
-#ifdef HAVE_SAVED_SUIDS
-static int save_euid;
-int swap_uids() { save_euid = geteuid(); return seteuid(getuid()); }
-int swap_uids_back() { return seteuid(save_euid); }
+#ifdef HAVE_SAVED_UIDS
+static uid_t save_euid, save_egid;
+int swap_uids()
+{
+	save_euid = geteuid(); save_egid = getegid();
+	return (setegid(getgid()) || seteuid(getuid())) ? -1 : 0;
+}
+int swap_uids_back()
+{
+	return (setegid(save_egid) || seteuid(save_euid)) ? -1 : 0;
+}
 #else /*HAVE_SAVED_UIDS*/
-int swap_uids() { return setreuid(geteuid(), getuid()); }
+int swap_uids()
+{
+	return (setregid(getegid(), getgid()) || setreuid(geteuid(), getuid()))
+		? -1 : 0;
+}
 int swap_uids_back() { return swap_uids(); }
 #endif /*HAVE_SAVED_UIDS*/
--- a/crontab.c
+++ b/crontab.c
@@ -227,7 +227,16 @@ parse_args(argc, argv)
 				perror(Filename);
 				exit(ERROR_EXIT);
 			}
-			if (swap_uids() < OK) {
+			/* Make sure we opened a normal file. */
+			if (fstat(fileno(NewCrontab), &statbuf) < 0) {
+				perror("fstat");
+				exit(ERROR_EXIT);
+			}
+			if (!S_ISREG(statbuf.st_mode)) {
+				fprintf(stderr, "%s: Not a regular file.\n", Filename);
+				exit(ERROR_EXIT);
+			}
+			if (swap_uids_back() < OK) {
 				perror("swapping uids back");
 				exit(ERROR_EXIT);
 			}
@@ -290,20 +299,158 @@ check_error(msg)
 }
 
 
+/* The next several function implement 'crontab -e' */
+
+/* Returns -1 on error, or fd to tempfile. */
+static int
+create_tmp_crontab()
+{
+        const char *template = "/crontab.XXXXXX";
+        int nfd;
+        char *tmp;
+
+        /* Create the temp directory. Note that since crontab is
+           setuid(root), TMPDIR only work for root. */
+	if ((tmp=getenv("TMPDIR")) && strlen(tmp) < MAX_FNAME) {
+	  strcpy(Directory, tmp);
+	} else {
+	  strcpy(Directory,"/tmp");
+	}
+
+        if (strlen(Directory) + strlen(template) < MAX_FNAME) {
+                strcat(Directory, template);
+        } else {
+                fprintf(stderr, "TMPDIR value is to long -- exiting\n");
+                Directory[0] = '\0';
+                return -1;
+        }
+
+        if (!mkdtemp(Directory)) {
+                perror(Directory);
+                Directory[0] = '\0';
+                return -1;
+        }
+
+        /* Now create the actual temporary crontab file */
+        if (snprintf(Filename, MAX_FNAME, "%s/crontab", Directory)
+            >= MAX_FNAME) {
+                fprintf(stderr, "Temporary filename too long - aborting\n");
+                Filename[0] = '\0';
+                return -1;
+        }
+        if ((nfd=open(Filename, O_CREAT|O_EXCL|O_WRONLY, 0600)) == -1) {
+                perror(Filename);
+                Filename[0] = '\0';
+                return -1;
+        }
+        return nfd;
+}
+
+/* Re-open the new (temporary) crontab, and check to make sure that
+   no-one is playing games. Return 0 on success, -1 on error. (Why not
+   just fopen() and stat()? Because there's no guarantee that you
+   fopen()ed the file you stat()ed.) */
+static int
+open_tmp_crontab(fsbuf)
+      struct stat *fsbuf;
+{
+        int t;
+        struct stat statbuf;
+
+        if ((t=open(Filename, O_RDONLY)) < 0) {
+                perror("Can't open tempfile after edit");
+                return -1;
+        }
+
+	if (fstat(t, &statbuf) < 0) {
+		perror("fstat");
+		return -1;
+	}
+	if (statbuf.st_uid != getuid()) {
+		fprintf(stderr, "Temporary crontab no longer owned by you.\n");
+		return -1;;
+	}
+
+        if (!S_ISREG(statbuf.st_mode)) {
+                fprintf(stderr, "The temporary crontab must remain a regular file");
+                return -1;
+        }
+
+        if (statbuf.st_mtime == fsbuf->st_mtime) {
+                return 1; /* No change to file */
+        }
+
+        NewCrontab = fdopen(t, "r");
+        if (!NewCrontab) {
+                perror("fdopen(): after edit");
+                return -1;
+        }
+        return 0;
+}
+
+/* We can't just delete Filename, because the editor might have
+   created other temporary files in there. If there's an error, we
+   just bail, and let the user/admin deal with it.*/
+
+static void
+cleanup_tmp_crontab(void) 
+{
+        DIR *dp;
+        struct dirent *ep;
+        char fname[MAX_FNAME];
+
+        if (Directory[0] == '\0') {
+                return;
+        }
+
+        /* Delete contents */
+        dp = opendir (Directory);
+        if (dp == NULL) {
+                perror(Directory);
+                return;
+        }
+
+        while ((ep = readdir (dp))) {
+                if (!strcmp(ep->d_name, ".") ||
+                    !strcmp(ep->d_name, "..")) {
+                        continue;
+                }
+                if (snprintf(fname, MAX_FNAME, "%s/%s",
+                             Directory, ep->d_name) >= MAX_FNAME) {
+                        fprintf(stderr, "filename too long to delete: %s/%s",
+                                Directory, ep->d_name);
+                        return;
+                }
+                if (unlink(fname)) {
+                        perror(ep->d_name);
+                        return;
+                }
+        }
+        (void) closedir (dp);
+
+        if (rmdir(Directory)) {
+                perror(Directory);
+                return;
+        }
+        return;
+}
+
 static void
 edit_cmd() {
 	char		n[MAX_FNAME], q[MAX_TEMPSTR], *editor;
 	FILE		*f;
 	int		ch, t, x;
-	struct stat	statbuf;
-	time_t		mtime;
+	struct stat     fsbuf;
 	WAIT_T		waiter;
 	PID_T		pid, xpid;
+	mode_t		um;
+	int             add_help_text = 0;
 
 	log_it(RealUser, Pid, "BEGIN EDIT", User);
-	(void) sprintf(n, CRON_TAB(User));
+	(void) snprintf(n, MAX_FNAME, CRON_TAB(User));
 	if (!(f = fopen(n, "r"))) {
 		if (errno != ENOENT) {
+                        fprintf(stderr, "%s/", CRONDIR);
 			perror(n);
 			exit(ERROR_EXIT);
 		}
@@ -313,28 +460,29 @@ edit_cmd() {
 			perror("/dev/null");
 			exit(ERROR_EXIT);
 		}
+		add_help_text = 1;
 	}
 
-	(void) sprintf(Filename, "/tmp/crontab.%d", Pid);
-	if (-1 == (t = open(Filename, O_CREAT|O_EXCL|O_RDWR, 0600))) {
-		perror(Filename);
-		goto fatal;
-	}
-#ifdef HAS_FCHOWN
-	if (fchown(t, getuid(), getgid()) < 0) {
-#else
-	if (chown(Filename, getuid(), getgid()) < 0) {
-#endif
-		perror("fchown");
+	um = umask(077);
+
+        if ((t=create_tmp_crontab()) < 0) {
+                fprintf(stderr, "Creation of temporary crontab file failed - aborting\n");
+                (void) umask(um);
 		goto fatal;
 	}
-	if (!(NewCrontab = fdopen(t, "r+"))) {
+
+	(void) umask(um);
+	if (!(NewCrontab = fdopen(t, "w"))) {
 		perror("fdopen");
 		goto fatal;
 	}
 
 	Set_LineNum(1)
 
+	if (add_help_text) {
+		fprintf(NewCrontab, "# m h  dom mon dow   command\n" );
+	}
+
 	/* ignore the top few comments since we probably put them there.
 	 */
 	for (x = 0;  x < NHEADER_LINES;  x++) {
@@ -358,37 +506,44 @@ edit_cmd() {
 		while (EOF != (ch = get_char(f)))
 			putc(ch, NewCrontab);
 	fclose(f);
-	if (fflush(NewCrontab) < OK) {
-		perror(Filename);
-		exit(ERROR_EXIT);
-	}
- again:
-	rewind(NewCrontab);
+
 	if (ferror(NewCrontab)) {
 		fprintf(stderr, "%s: error while writing new crontab to %s\n",
 			ProgramName, Filename);
- fatal:		unlink(Filename);
-		exit(ERROR_EXIT);
 	}
-	if (fstat(t, &statbuf) < 0) {
-		perror("fstat");
+
+	if (fstat(t, &fsbuf) < 0) {
+		perror("unable to stat temp file");
 		goto fatal;
 	}
-	mtime = statbuf.st_mtime;
 
-	if ((!(editor = getenv("VISUAL")))
-	 && (!(editor = getenv("EDITOR")))
+
+
+        /* Okay, edit the file */
+
+	if ((!((editor = getenv("VISUAL")) && strlen(editor)))
+	 && (!((editor = getenv("EDITOR")) && strlen(editor)))
 	    ) {
 		editor = EDITOR;
 	}
 
-	/* we still have the file open.  editors will generally rewrite the
-	 * original file rather than renaming/unlinking it and starting a
-	 * new one; even backup files are supposed to be made by copying
-	 * rather than by renaming.  if some editor does not support this,
-	 * then don't use it.  the security problems are more severe if we
-	 * close and reopen the file around the edit.
-	 */
+
+        /*  Close before cleanup_tmp_crontab is called or otherwise
+         *  (on NFS mounted /) will get renamed on unlink */
+	if (fclose(NewCrontab) != 0) {
+		perror(Filename);
+                goto fatal;
+	}
+
+again: /* Loop point for retrying edit after error */
+
+	/* Turn off signals. */
+	(void)signal(SIGHUP, SIG_IGN);
+	(void)signal(SIGINT, SIG_IGN);
+	(void)signal(SIGQUIT, SIG_IGN);
+
+        /* Give up privileges while editing */
+        swap_uids();
 
 	switch (pid = fork()) {
 	case -1:
@@ -396,10 +551,14 @@ edit_cmd() {
 		goto fatal;
 	case 0:
 		/* child */
-		if (setuid(getuid()) < 0) {
-			perror("setuid(getuid())");
-			exit(ERROR_EXIT);
-		}
+                if (setgid(getgid()) < 0) {
+                        perror("setgid(getgid())");
+                        exit(ERROR_EXIT);
+                }
+                if (setuid(getuid()) < 0) {
+                        perror("setuid(getuid())");
+                        exit(ERROR_EXIT);
+                }
 		if (chdir("/tmp") < 0) {
 			perror("chdir(/tmp)");
 			exit(ERROR_EXIT);
@@ -409,7 +568,7 @@ edit_cmd() {
 				ProgramName);
 			exit(ERROR_EXIT);
 		}
-		sprintf(q, "%s %s", editor, Filename);
+		snprintf(q, MAX_TEMPSTR, "%s %s", editor, Filename);
 		execlp(_PATH_BSHELL, _PATH_BSHELL, "-c", q, NULL);
 		perror(editor);
 		exit(ERROR_EXIT);
@@ -420,33 +579,53 @@ edit_cmd() {
 	}
 
 	/* parent */
-	xpid = wait(&waiter);
-	if (xpid != pid) {
-		fprintf(stderr, "%s: wrong PID (%d != %d) from \"%s\"\n",
-			ProgramName, xpid, pid, editor);
-		goto fatal;
-	}
-	if (WIFEXITED(waiter) && WEXITSTATUS(waiter)) {
-		fprintf(stderr, "%s: \"%s\" exited with status %d\n",
-			ProgramName, editor, WEXITSTATUS(waiter));
-		goto fatal;
-	}
-	if (WIFSIGNALED(waiter)) {
-		fprintf(stderr,
-			"%s: \"%s\" killed; signal %d (%score dumped)\n",
-			ProgramName, editor, WTERMSIG(waiter),
-			WCOREDUMP(waiter) ?"" :"no ");
-		goto fatal;
-	}
-	if (fstat(t, &statbuf) < 0) {
-		perror("fstat");
-		goto fatal;
-	}
-	if (mtime == statbuf.st_mtime) {
-		fprintf(stderr, "%s: no changes made to crontab\n",
-			ProgramName);
-		goto remove;
+	while (1) {
+		xpid = waitpid(pid, &waiter, WUNTRACED);
+		if (xpid == -1) {
+			fprintf(stderr, "%s: waitpid() failed waiting for PID %d from \"%s\": %s\n",
+				ProgramName, pid, editor, strerror(errno));
+		} else if (xpid != pid) {
+			fprintf(stderr, "%s: wrong PID (%d != %d) from \"%s\"\n",
+				ProgramName, xpid, pid, editor);
+			goto fatal;
+		} else if (WIFSTOPPED(waiter)) {
+		        /* raise(WSTOPSIG(waiter)); Not needed and breaks in job control shell*/
+		} else if (WIFEXITED(waiter) && WEXITSTATUS(waiter)) {
+			fprintf(stderr, "%s: \"%s\" exited with status %d\n",
+				ProgramName, editor, WEXITSTATUS(waiter));
+			goto fatal;
+		} else if (WIFSIGNALED(waiter)) {
+			fprintf(stderr,
+				"%s: \"%s\" killed; signal %d (%score dumped)\n",
+				ProgramName, editor, WTERMSIG(waiter),
+				WCOREDUMP(waiter) ?"" :"no ");
+			goto fatal;
+		} else
+			break;
 	}
+	(void)signal(SIGHUP, SIG_DFL);
+	(void)signal(SIGINT, SIG_DFL);
+	(void)signal(SIGQUIT, SIG_DFL);
+	(void)signal(SIGTSTP, SIG_DFL);
+
+        /* Need privs again */
+        swap_uids_back();
+
+        switch (open_tmp_crontab(&fsbuf)) {
+        case -1:
+                fprintf(stderr, "Error while editing crontab\n");
+                goto fatal;
+        case 1:
+                fprintf(stderr, "No modification made\n");
+                goto remove;
+        case 0:
+                break;
+        default:
+                fprintf(stderr,
+                        "cron@packages.debian.org fscked up. Send him a nasty note\n");
+                break;
+        }
+
 	fprintf(stderr, "%s: installing new crontab\n", ProgramName);
 	switch (replace_cmd()) {
 	case 0:
@@ -473,15 +652,33 @@ edit_cmd() {
 			ProgramName, Filename);
 		goto done;
 	default:
-		fprintf(stderr, "%s: panic: bad switch() in replace_cmd()\n");
+		fprintf(stderr, "%s: panic: bad switch() in replace_cmd()\n",
+		    ProgramName);
 		goto fatal;
 	}
+
+       if (fclose(NewCrontab) != 0) {
+               perror(Filename);
+       }
+
  remove:
-	unlink(Filename);
+        cleanup_tmp_crontab();
  done:
 	log_it(RealUser, Pid, "END EDIT", User);
+        return;
+ fatal:
+        cleanup_tmp_crontab();
+        unlink(Filename);
+        exit(ERROR_EXIT);
 }
-	
+
+static char tn[MAX_FNAME];
+
+static void sig_handler(int x)
+{
+	unlink(tn);
+	exit(1);
+}	
 
 /* returns	0	on success
  *		-1	on syntax error
